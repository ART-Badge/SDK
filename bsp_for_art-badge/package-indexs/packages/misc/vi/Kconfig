menuconfig PKG_USING_VI
    bool "vi: A screen-oriented text editor"
    select RT_USING_DFS
    select RT_USING_LIBC
    select RT_USING_POSIX
    select PKG_USING_OPTPARSE
    select PKG_USING_MEM_SANDBOX
    default n

if PKG_USING_VI

    config PKG_VI_PATH
        string
        default "/packages/misc/vi"

    config VI_SANDBOX_SIZE_KB
        int "Space size of the vi sandbox (KB)"
        default 20

    config VI_MAX_LEN
        int "Maximum screen width in vi"
        range 256 16384
        default 4096
        help
          Contrary to what you may think, this is not eating much.
          Make it smaller than 4k only if you are very limited on memory.

    config VI_ENABLE_8BIT
        bool "Allow vi to display 8-bit chars (otherwise shows dots)"
        default n
        help
          If your terminal can display characters with high bit set,
          you may want to enable this. Note: vi is not Unicode-capable.
          If your terminal combines several 8-bit bytes into one character
          (as in Unicode mode), this will not work properly.

    config VI_ENABLE_COLON
        bool "Enable \":\" colon commands (no \"ex\" mode)"
        default y
        help
          Enable a limited set of colon commands for vi. This does not
          provide an "ex" mode.

    config VI_ENABLE_COLON_EXPAND
        bool "Expand \"%\" and \"#\" in colon commands"
        default y
        depends on VI_ENABLE_COLON
        help
          Expand the special characters \"%\" (current filename)
          and \"#\" (alternate filename) in colon commands.

    config VI_ENABLE_YANKMARK
        bool "Enable yank/put commands and mark cmds"
        default y
        help
          This will enable you to use yank and put, as well as mark in
          busybox vi.

    config VI_ENABLE_SEARCH
        bool "Enable search and replace cmds"
        default y
        help
          Select this if you wish to be able to do search and replace in
          busybox vi.

    config VI_ENABLE_DOT_CMD
        bool "Remember previous cmd and \".\" cmd"
        default y
        help
          Make busybox vi remember the last command and be able to repeat it.

    config VI_ENABLE_READONLY
        bool "Enable -R option and \"view\" mode"
        default y
        help
          Enable the read-only command line option, which allows the user to
          open a file in read-only mode.

    config VI_ENABLE_SETOPTS
        bool "Enable set-able options, ai ic showmatch"
        default y
        help
          Enable the editor to set some (ai, ic, showmatch) options.

    config VI_ENABLE_SET
        bool "Support for :set"
        default y
        help
          Support for ":set".

    config VI_ENABLE_WIN_RESIZE
        select RT_USING_POSIX_TERMIOS
        bool "Handle window resize"
        default n
        help
          Make busybox vi behave nicely with terminals that get resized.

    config VI_ENABLE_VI_ASK_TERMINAL
        bool "Use 'tell me cursor position' ESC sequence to measure window"
        default y
        help
          If terminal size can't be retrieved and $LINES/$COLUMNS are not set,
          this option makes vi perform a last-ditch effort to find it:
          position cursor to 999,999 and ask terminal to report real
          cursor position using "ESC [ 6 n" escape sequence, then read stdin.
          This is not clean but helps a lot on serial lines and such.

    config VI_ENABLE_UNDO
        bool "Support undo command 'u'"
        default y
        help
          Support the 'u' command to undo insertion, deletion, and replacement
          of text.

    config VI_ENABLE_UNDO_QUEUE
        bool "Enable undo operation queuing"
        default y
        depends on VI_ENABLE_UNDO
        help
          The vi undo functions can use an intermediate queue to greatly lower
          malloc() calls and overhead. When the maximum size of this queue is
          reached, the contents of the queue are committed to the undo stack.
          This increases the size of the undo code and allows some undo
          operations (especially un-typing/backspacing) to be far more useful.

    config VI_UNDO_QUEUE_MAX
        int "Maximum undo character queue size"
        default 256
        range 32 65536
        depends on VI_ENABLE_UNDO_QUEUE
        help
          This option sets the number of bytes used at runtime for the queue.
          Smaller values will create more undo objects and reduce the amount
          of typed or backspaced characters that are grouped into one undo
          operation; larger values increase the potential size of each undo
          and will generally malloc() larger objects and less frequently.
          Unless you want more (or less) frequent "undo points" while typing,
          you should probably leave this unchanged.        

    config VI_ENABLE_VERBOSE_STATUS
        bool "Enable verbose status reporting"
        default y
        help
          Enable more verbose reporting of the results of yank, change,
          delete, undo and substitution commands.

    choice
        prompt "Version"
        help
            Select this package version

        config PKG_USING_VI_LATEST_VERSION
            bool "latest"
    endchoice

    config PKG_VI_VER
        string
        default "latest" if PKG_USING_VI_LATEST_VERSION

endif
